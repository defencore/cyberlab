# Script Name: Mikrotik CSS326-24G-2S+ Honeypot Web Interface
# Description:
# This script creates a honeypot designed to mimic the login page of a Mikrotik CSS326-24G-2S+ switch. 
# The purpose of the honeypot is to capture potential unauthorized access attempts by emulating a real 
# web interface, allowing for analysis of attacker behavior. The web page is styled and structured to 
# closely resemble the legitimate Mikrotik login page, but all input is captured and logged for further 
# investigation without granting any real access to network devices.
#
# The script does not fully emulate the device and its services, and may also crash when scanning, 
# which requires some improvement.
#
# Usage:
# - Deploy the script on a server or device with a web server configured to host the honeypot.
# - python3 honeypot_CSS326-24G-2S+.py --host 0.0.0.0 --port 80 -o /var/log/honeypot_CSS326-24G-2S+.log

import os
import socket
import sys
import base64
import gzip
import logging
import subprocess
from datetime import datetime
import argparse


INDEX_HTML_BASE64_GZIPPED = ""

def get_mac_address(ip_address):
    try:
        result = subprocess.run(['arp', '-n', ip_address], capture_output=True, text=True)
        for line in result.stdout.split('\n'):
            if ip_address in line:
                return line.split()[2].upper()
    except Exception as e:
        print(f"Error getting MAC address: {e}")
    return "MAC Address Not Found"

def log_auth_attempt(client_ip, mac_address, user_agent, uri, digest_auth):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = f"{mac_address}, {client_ip}, {user_agent}, {uri}, {digest_auth}"
    logging.info(log_entry)

def start_server(host, port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Server started on {host}:{port}")

    while True:
        client_socket, client_address = server_socket.accept()
        request = client_socket.recv(1024).decode('utf-8')
        print(f"Request from {client_address}:\n{request}")

        mac_address = get_mac_address(client_address[0])

        user_agent = None
        for line in request.split("\r\n"):
            if "User-Agent" in line:
                user_agent = line.split("User-Agent: ")[1]
                break

        if user_agent is None:
            user_agent = "User-Agent Not Found"

        request_path = request.split(' ')[1]

        digest_auth = None
        for line in request.split("\r\n"):
            if "Authorization" in line:
                digest_auth = line
                break

        if digest_auth is None:
            digest_auth = "No Authorization Header"

        log_auth_attempt(client_address[0], mac_address, user_agent, request_path, digest_auth)

        if request_path == '/sys.b':
            response = """HTTP/1.0 401 Unauthorized\r
WWW-Authenticate: Digest realm="CSS326-24G-2S+", qop="auth", nonce="b367c9dc", stale=FALSE\r
Content-Type: text/html\r
\r
<h1>401 Unauthorized</h1>"""
            client_socket.sendall(response.encode('utf-8'))
        elif request_path == '/index.html':
            try:
                gzipped_content = base64.b64decode(INDEX_HTML_BASE64_GZIPPED)
                decompressed_content = gzip.decompress(gzipped_content).decode('utf-8')
                response = f"""HTTP/1.0 200 OK\r
Content-Type: text/html\r
\r\n{decompressed_content}"""
                client_socket.sendall(response.encode('utf-8'))
            except Exception as e:
                print(f"Error serving index.html: {e}")
                response = """HTTP/1.0 500 Internal Server Error\r
Content-Type: text/html\r
\r
<html><body><h1>500 Internal Server Error</h1></body></html>"""
                client_socket.sendall(response.encode('utf-8'))
        else:
            response = """HTTP/1.0 302 Found\r
Location: /index.html\r
Content-Type: text/html\r
\r
<html><body><h1>302 Found</h1></body></html>"""
            client_socket.sendall(response.encode('utf-8'))

        client_socket.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Honeypot server')
    parser.add_argument('--host', default='0.0.0.0', help='Host IP to bind the server (default: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=80, help='Port to bind the server (default: 80)')
    parser.add_argument('-o', '--logfile', default=os.path.join(os.getcwd(), 'honeypot_CSS326-24G-2S+.log'), 
                        help='Path to the log file (default: ./honeypot_CSS326-24G-2S+.log)')
    
    args = parser.parse_args()

    logging.basicConfig(filename=args.logfile, level=logging.INFO, format='%(asctime)s - %(message)s')

    start_server(args.host, args.port)
